"""
title: Bible Fetching Tool and citations French/English
author: lagyraf inspir√© par Gunalx
project: https://github.com/gyraffon/Bible-Fetching-for-Open-Webui/upload/main
version: 2.0.1
open_webui_version: 0.6.15 tested
"""

import sqlite3
import logging
import re
from pydantic import BaseModel, Field
from typing import Dict, Optional, List


class Tools:
    class Valves(BaseModel):
        translation: str = Field(default="web", description="Translation method")
        citation_source: str = Field(
            default="Local SQLite DB", description="Citation source"
        )
        db_path: str = Field(
            default="CHEMIN_VERS_DATABASE_DANS_VENV_OPEN_WEBUI", description="Database path"
        )
        enable_tool: bool = Field(default=True, description="Enable/disable the tool")

    def __init__(self):
        self.valves = self.Valves()

    async def search_bible_verses(
        self, query: str, __event_emitter__=None, __user__: Optional[dict] = None
    ) -> str:
        """
        Search for Bible verses based on a query in French or English.

        :param query: The search query about Bible topics
        :return: Bible verses related to the query
        """

        if not self.valves.enable_tool:
            return "L'outil de recherche biblique est d√©sactiv√©."

        # Emit status if available
        if __event_emitter__:
            await __event_emitter__(
                {
                    "type": "status",
                    "data": {
                        "description": f"üîç Recherche de versets pour: {query}",
                        "done": False,
                    },
                }
            )

        try:
            # Process the query
            result = self._process_user_prompt(query)

            if __event_emitter__:
                await __event_emitter__(
                    {
                        "type": "status",
                        "data": {"description": "‚úÖ Recherche termin√©e", "done": True},
                    }
                )

            if isinstance(result, dict) and "text" in result:
                response_text = result["text"]
                if response_text in ["no answer", "aucune r√©ponse"]:
                    return "Aucun verset biblique trouv√© pour votre recherche. Essayez avec d'autres mots-cl√©s comme 'amour', 'foi', 'espoir', etc."
                return response_text
            else:
                return "Aucun verset biblique trouv√© pour votre recherche."

        except Exception as e:
            logging.error(f"Erreur dans search_bible_verses: {e}")
            if __event_emitter__:
                await __event_emitter__(
                    {
                        "type": "status",
                        "data": {"description": f"‚ùå Erreur: {str(e)}", "done": True},
                    }
                )
            return f"Une erreur s'est produite lors de la recherche: {str(e)}"

    def _is_french(self, text: str) -> bool:
        """Check if the text contains French words or patterns."""
        text_lower = text.lower()
        french_indicators = [
            r"\b(le|la|les|un|une|des|du|de|dans|sur|avec|pour|par)\b",
            r"\b(que|qui|quoi|o√π|quand|comment|pourquoi)\b",
            r"\b(montre|trouve|cherche|versets?|bible)\b",
            r"[√†√¢√§√©√®√™√´√Æ√Ø√¥√∂√π√ª√º√ø√ß]",
        ]
        return any(re.search(pattern, text_lower) for pattern in french_indicators)

    def _extract_keyword(self, prompt: str) -> str:
        """Extract a keyword from the prompt."""
        prompt_lower = prompt.lower().strip()

        # French keywords mapping
        french_keywords = {
            "foi": "faith",
            "croyance": "faith",
            "confiance": "faith",
            "amour": "love",
            "charit√©": "love",
            "compassion": "love",
            "sagesse": "wisdom",
            "sage": "wisdom",
            "connaissance": "wisdom",
            "paix": "peace",
            "s√©r√©nit√©": "peace",
            "tranquillit√©": "peace",
            "joie": "joy",
            "bonheur": "joy",
            "all√©gresse": "joy",
            "justice": "justice",
            "droiture": "justice",
            "√©quit√©": "justice",
            "pardon": "forgiveness",
            "pardoner": "forgiveness",
            "force": "strength",
            "courage": "strength",
            "humilit√©": "humility",
            "humble": "humility",
            "pri√®re": "prayer",
            "prier": "prayer",
            "adoration": "prayer",
            "p√©ch√©": "sin",
            "tentation": "sin",
            "mal": "sin",
            "vie": "life",
            "mort": "death",
            "r√©surrection": "resurrection",
            "dieu": "god",
            "seigneur": "god",
            "p√®re": "god",
            "famille": "family",
            "travail": "work",
            "peur": "fear",
            "espoir": "hope",
            "esp√©rance": "hope",
        }

        # Check for direct matches first
        for french_word, english_word in french_keywords.items():
            if french_word in prompt_lower:
                return english_word

        # English patterns
        english_patterns = {
            r"\b(faith|believe|belief|trust|hope)\b": "faith",
            r"\b(love|charity|compassion|mercy|grace)\b": "love",
            r"\b(wisdom|wise|knowledge|understanding)\b": "wisdom",
            r"\b(peace|serenity|tranquility)\b": "peace",
            r"\b(joy|happiness|rejoicing)\b": "joy",
            r"\b(justice|righteousness|truth)\b": "justice",
            r"\b(forgiveness|forgive|reconciliation)\b": "forgiveness",
            r"\b(strength|courage|bravery)\b": "strength",
            r"\b(humility|humble|service)\b": "humility",
            r"\b(prayer|pray|worship|praise)\b": "prayer",
            r"\b(sin|temptation|evil)\b": "sin",
            r"\b(life|death|resurrection|salvation)\b": "life",
            r"\b(god|lord|father|spirit|holy)\b": "god",
            r"\b(family|marriage|children)\b": "family",
            r"\b(work|mission|purpose)\b": "work",
            r"\b(fear|anxiety|worry)\b": "fear",
        }

        for pattern, keyword in english_patterns.items():
            if re.search(pattern, prompt_lower):
                return keyword

        return "faith"  # Default fallback

    def _search_database(self, keyword: str, limit: int = 10) -> Dict:
        """Search the database for verses containing the keyword."""
        if not keyword:
            return {"text": "no answer", "citation": None}

        try:
            with sqlite3.connect(self.valves.db_path) as conn:
                cursor = conn.cursor()
                # Search in text content
                query = "SELECT book, chapter, verse, text FROM bible WHERE text LIKE ? LIMIT ?"
                cursor.execute(query, (f"%{keyword}%", limit))
                results = cursor.fetchall()
        except sqlite3.Error as e:
            logging.error(f"Database error: {e}")
            return {"text": "no answer", "citation": None}
        except FileNotFoundError:
            logging.error(f"Database file not found: {self.valves.db_path}")
            return {"text": "no answer", "citation": None}

        if not results:
            return {"text": "no answer", "citation": None}

        # Format results
        output_lines = []
        for book, chapter, verse, text in results:
            output_lines.append(f"{book} {chapter}:{verse} - {text.strip()}")

        return {
            "text": "\n\n".join(output_lines),
            "citation": {
                "source": self.valves.citation_source,
                "search_keyword": keyword,
                "results_found": len(results),
            },
        }

    def _process_user_prompt(self, user_prompt: str) -> Dict:
        """Process the user prompt and return search results."""
        try:
            # Detect language
            is_french_prompt = self._is_french(user_prompt)

            # Extract keyword
            keyword = self._extract_keyword(user_prompt)
            if not keyword:
                return {
                    "text": "aucune r√©ponse" if is_french_prompt else "no answer",
                    "citation": None,
                }

            # Search database
            search_results = self._search_database(keyword)

            # Handle no results
            if search_results["text"] == "no answer":
                search_results["text"] = (
                    "aucune r√©ponse" if is_french_prompt else "no answer"
                )
                return search_results

            # Add French header if needed
            if is_french_prompt and search_results["text"] != "no answer":
                search_results["text"] = (
                    f"Voici des versets bibliques sur '{keyword}' :\n\n{search_results['text']}"
                )

            return search_results

        except Exception as e:
            logging.error(f"Error processing prompt: {e}")
            is_french_prompt = self._is_french(user_prompt)
            return {
                "text": "aucune r√©ponse" if is_french_prompt else "no answer",
                "citation": None,
            }
